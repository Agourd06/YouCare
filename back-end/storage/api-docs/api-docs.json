{
    "openapi": "3.0.0",
    "info": {
        "title": "My First API Documentation",
        "contact": {
            "email": "info@yeagger.com"
        },
        "version": "0.1"
    },
    "servers": [
        {
            "url": "https://localhost:8000/",
            "description": "Learning env"
        }
    ],
    "paths": {
        "/api/login": {
            "post": {
                "summary": "login user",
                "operationId": "a3b306d14572d1f4bd6c064b3233e7b8",
                "parameters": [
                    {
                        "name": "email",
                        "in": "query",
                        "description": "User's email",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "password",
                        "in": "query",
                        "description": "User's password",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User created successfully"
                    },
                    "422": {
                        "description": "Validation errors"
                    }
                }
            }
        },
        "/api/register": {
            "post": {
                "summary": "Register a new user",
                "operationId": "8a56853624e025573120a09a4c75d468",
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "description": "User's name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "email",
                        "in": "query",
                        "description": "User's email",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "password",
                        "in": "query",
                        "description": "User's password",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "role",
                        "in": "query",
                        "description": "User's role",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User created successfully"
                    },
                    "422": {
                        "description": "Validation errors"
                    }
                }
            }
        },
        "/api/logout": {
            "post": {
                "summary": "User Log Out",
                "operationId": "fe8f3429cd6979b3b4517e186505f9f9",
                "responses": {
                    "200": {
                        "description": "User created successfully"
                    },
                    "422": {
                        "description": "Validation errors"
                    }
                }
            }
        },
        "/api/storeEvent": {
            "post": {
                "summary": "Add New Event",
                "operationId": "e35896a845ee30f3609c360bb0272173",
                "parameters": [
                    {
                        "name": "title",
                        "in": "query",
                        "description": "Event title",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Event type",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "date",
                        "in": "query",
                        "description": "Event date",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "description",
                        "in": "query",
                        "description": "Event description",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "localisation",
                        "in": "query",
                        "description": "Event localisation",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "competence",
                        "in": "query",
                        "description": "Event competence",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userId",
                        "in": "query",
                        "description": "Event organizer",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User created successfully"
                    },
                    "422": {
                        "description": "Validation errors"
                    }
                }
            }
        },
        "/api/dataEvents": {
            "get": {
                "summary": "Get Events Details",
                "operationId": "b50a3e57d9baae41221b4eb68d76f0d0",
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            }
        },
        "/api/storeReservation/{id}": {
            "post": {
                "summary": "New reservation for event",
                "operationId": "e7a640940c6c4c43785183669cecafa8",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "Event Id for reservation",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User created successfully"
                    },
                    "422": {
                        "description": "Validation errors"
                    }
                }
            }
        },
        "/api/dataReservations": {
            "get": {
                "summary": "Get Reservations Details",
                "operationId": "df25c67de24b0d0352bce7214ccd19cf",
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "security": [
                    {
                        "bearer_token": []
                    }
                ]
            }
        },
        "/api/reservations/{id}": {
            "put": {
                "summary": "Update reservation status",
                "operationId": "40e8ef3d99604a12c1ff88afafb09373",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the reservation to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Fields to update",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "Newstatut": {
                                        "description": "New status for the reservation",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Reservation status updated successfully"
                    },
                    "422": {
                        "description": "Validation errors"
                    }
                }
            }
        }
    },
    "components": {
        "securitySchemes": {
            "apiAuth": {
                "type": "http",
                "description": "Login with email and password to get the authentication token",
                "name": "Token based Based",
                "in": "header",
                "bearerFormat": "JWT",
                "scheme": "bearer"
            },
            "bearer_token": {
                "type": "http",
                "scheme": "bearer",
                "description": "Enter token in format (Bearer token)",
                "name": "Authorization",
                "in": "header"
            }
        }
    }
}